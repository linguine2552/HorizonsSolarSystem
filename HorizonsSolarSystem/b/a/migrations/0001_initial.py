# Generated by Django 5.1.1 on 2024-09-18 02:37

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CelestialBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('vol_mean_radius', models.FloatField(help_text='Volume mean radius in km')),
                ('vol_mean_radius_uncertainty', models.FloatField(blank=True, help_text='Uncertainty in volume mean radius in km', null=True)),
                ('density', models.FloatField(help_text='Density in g/cm^3')),
                ('density_uncertainty', models.FloatField(blank=True, help_text='Uncertainty in density', null=True)),
                ('mass', models.FloatField(help_text='Mass in 10^23 kg')),
                ('flattening', models.FloatField(help_text='Flattening, f')),
                ('volume', models.FloatField(help_text='Volume in 10^10 km^3')),
                ('equatorial_radius', models.FloatField(help_text='Equatorial radius in km')),
                ('sidereal_rot_period', models.FloatField(help_text='Sidereal rotation period in hours')),
                ('sid_rot_rate', models.FloatField(help_text='Sidereal rotation rate in rad/s')),
                ('mean_solar_day', models.FloatField(help_text='Mean solar day in seconds')),
                ('polar_gravity', models.FloatField(help_text='Polar gravity in m/s^2')),
                ('core_radius', models.FloatField(blank=True, help_text='Core radius in km', null=True)),
                ('equatorial_gravity', models.FloatField(help_text='Equatorial gravity in m/s^2')),
                ('geometric_albedo', models.FloatField()),
                ('gm', models.FloatField(help_text='GM (gravitational constant * mass) in km^3/s^2')),
                ('gm_uncertainty', models.FloatField(blank=True, help_text='Uncertainty in GM in km^3/s^2', null=True)),
                ('mass_ratio_to_sun', models.FloatField(help_text='Mass ratio (Sun/Body)')),
                ('atmosphere_mass', models.FloatField(blank=True, help_text='Mass of atmosphere in kg', null=True)),
                ('mean_temperature', models.FloatField(help_text='Mean temperature in Kelvin')),
                ('surface_pressure', models.FloatField(help_text='Surface pressure in bar')),
                ('obliquity_to_orbit', models.FloatField(help_text='Obliquity to orbit in degrees')),
                ('max_angular_diameter', models.FloatField(help_text='Maximum angular diameter in arcseconds')),
                ('mean_sidereal_orbit_period_years', models.FloatField(help_text='Mean sidereal orbit period in years')),
                ('mean_sidereal_orbit_period_days', models.FloatField(help_text='Mean sidereal orbit period in days')),
                ('visual_magnitude', models.FloatField(help_text='Visual magnitude V(1,0)')),
                ('orbital_speed', models.FloatField(help_text='Orbital speed in km/s')),
                ('hill_sphere_radius', models.FloatField(help_text="Hill's sphere radius in planetary radii")),
                ('escape_speed', models.FloatField(help_text='Escape speed in km/s')),
                ('solar_constant_perihelion', models.FloatField(help_text='Solar Constant at perihelion in W/m^2')),
                ('solar_constant_aphelion', models.FloatField(help_text='Solar Constant at aphelion in W/m^2')),
                ('solar_constant_mean', models.FloatField(help_text='Mean Solar Constant in W/m^2')),
                ('max_planetary_ir_perihelion', models.FloatField(help_text='Maximum Planetary IR at perihelion in W/m^2')),
                ('max_planetary_ir_aphelion', models.FloatField(help_text='Maximum Planetary IR at aphelion in W/m^2')),
                ('max_planetary_ir_mean', models.FloatField(help_text='Mean Maximum Planetary IR in W/m^2')),
                ('min_planetary_ir', models.FloatField(help_text='Minimum Planetary IR in W/m^2')),
                ('target_pole_equ', models.CharField(help_text='Target pole/equator system', max_length=100)),
                ('target_radii_a', models.FloatField(help_text='Target equatorial radius a in km')),
                ('target_radii_b', models.FloatField(help_text='Target equatorial radius b in km')),
                ('target_radii_c', models.FloatField(help_text='Target polar radius c in km')),
                ('center_geodetic_lon', models.FloatField(help_text='Center geodetic longitude in degrees')),
                ('center_geodetic_lat', models.FloatField(help_text='Center geodetic latitude in degrees')),
                ('center_geodetic_alt', models.FloatField(help_text='Center geodetic altitude in km')),
                ('center_cylindric_lon', models.FloatField(help_text='Center cylindrical longitude in degrees')),
                ('center_cylindric_dxy', models.FloatField(help_text='Center cylindrical Dxy in km')),
                ('center_cylindric_dz', models.FloatField(help_text='Center cylindrical Dz in km')),
                ('center_pole_equ', models.CharField(help_text='Center pole/equator system', max_length=100)),
                ('center_radii_a', models.FloatField(help_text='Center equatorial radius a in km')),
                ('center_radii_b', models.FloatField(help_text='Center equatorial radius b in km')),
                ('center_radii_c', models.FloatField(help_text='Center polar radius c in km')),
                ('target_primary', models.CharField(help_text='Primary body for the target', max_length=100)),
                ('vis_interferer', models.CharField(help_text='Visual interferer', max_length=100)),
                ('vis_interferer_radius', models.FloatField(help_text='Visual interferer radius in km')),
                ('rel_light_bend', models.CharField(help_text='Relative light bending source', max_length=100)),
                ('rel_light_bend_gm', models.FloatField(help_text='Relative light bending GM in km^3/s^2')),
                ('atmos_refraction', models.CharField(help_text='Atmospheric refraction model', max_length=100)),
                ('ra_format', models.CharField(help_text='Right Ascension format', max_length=10)),
                ('time_format', models.CharField(help_text='Time format', max_length=10)),
                ('calendar_mode', models.CharField(help_text='Calendar mode', max_length=100)),
                ('eop_file', models.CharField(help_text='Earth Orientation Parameters file', max_length=100)),
                ('eop_coverage_start', models.DateField(help_text='Start date of EOP coverage')),
                ('eop_coverage_end', models.DateField(help_text='End date of EOP coverage')),
                ('eop_predict_end', models.DateField(help_text='End date of EOP predictions')),
                ('au_km', models.FloatField(help_text='1 AU in km')),
                ('c_km_s', models.FloatField(help_text='Speed of light in km/s')),
                ('day_s', models.FloatField(help_text='1 day in seconds')),
                ('elevation_cutoff', models.FloatField(help_text='Elevation cut-off in degrees')),
                ('airmass_cutoff', models.FloatField(help_text='Airmass cut-off')),
                ('solar_elongation_cutoff_min', models.FloatField(help_text='Minimum solar elongation cut-off in degrees')),
                ('solar_elongation_cutoff_max', models.FloatField(help_text='Maximum solar elongation cut-off in degrees')),
                ('local_hour_angle_cutoff', models.FloatField(help_text='Local Hour Angle cut-off')),
                ('ra_dec_angular_rate_cutoff', models.FloatField(help_text='RA/DEC angular rate cut-off')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Celestial Bodies',
            },
        ),
    ]
